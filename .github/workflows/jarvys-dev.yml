name: JARVYS-Dev Orchestration

on:
  # exécute l’agent chaque heure
  schedule:
    - cron: '0 * * * *'
  # exécution manuelle
  workflow_dispatch:

env:
  IMAGE_NAME: jarvys-dev
  IMAGE_TAG: latest

jobs:
  build-and-run:
    runs-on: ubuntu-latest
    timeout-minutes: 30         # coupe le job s’il dépasse 30 min
    concurrency:                # évite deux runs simultanés
      group: jarvys-dev
      cancel-in-progress: true

    steps:
      # 1️⃣ Récupération du code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2️⃣ Builder Docker « container » compatible cache GHA
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true           # remplace la commande docker build classique

      # 3️⃣ Build de l’image (cache GHA)
      - name: Build container image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to:   type=gha,mode=max
          push: false             # pas de push dans un registry public

      # 4️⃣ Lancement de l’agent JARVYS-Dev
      - name: Run JARVYS-Dev agent
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SUPABASE_URL:   ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY:   ${{ secrets.SUPABASE_KEY }}
          GITHUB_TOKEN:   ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker run --rm \
            -e OPENAI_API_KEY \
            -e SUPABASE_URL \
            -e SUPABASE_KEY \
            -e GITHUB_TOKEN \
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
