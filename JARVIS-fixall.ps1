# JARVIS-fixall.ps1 : R√©pare et optimise tout l‚Äôenvironnement Double Num√©rique
Write-Host "üõ†Ô∏è [JARVIS] Audit & Correction en cours..." -ForegroundColor Cyan

# --- 1. Recherche de doublons dans le r√©pertoire principal
$Root = Get-Location
$proj = "my-double-numerique"
$dupes = Get-ChildItem -Path $Root -Directory | Where-Object { $_.Name -match "^$proj(-copy)?$" }
if ($dupes.Count -gt 1) {
    Write-Host "‚ö†Ô∏è Doublons d√©tect√©s dans : $($dupes | % { $_.FullName } | Out-String)"
    $main = $dupes | Where-Object { $_.Name -eq $proj } | Select-Object -First 1
    $toRemove = $dupes | Where-Object { $_.Name -ne $proj }
    foreach ($d in $toRemove) {
        $dest = Join-Path -Path $main.FullName -ChildPath $d.Name
        Move-Item -Path $d.FullName -Destination $main.FullName -Force -ErrorAction SilentlyContinue
        Remove-Item -Path $d.FullName -Recurse -Force -ErrorAction SilentlyContinue
    }
    Write-Host "‚úÖ Doublons fusionn√©s/r√©par√©s"
}

# --- 2. V√©rifie les fichiers/folders obligatoires
$mandatory = @(
    "data", "logs", "scripts", "plugins", "web_interface", "wsgi", ".env", "profile.json", "requirements.txt", "agent_core.py"
)
foreach ($item in $mandatory) {
    if (-not (Test-Path $item)) {
        if ($item -match "\.") { New-Item $item -ItemType File -Force }
        else { New-Item $item -ItemType Directory -Force }
        Write-Host "üü¢ Cr√©√© : $item"
    }
}

# --- 3. V√©rifie le .env, propose la saisie des clefs si manquantes
$envFile = ".env"
if (-not (Test-Path $envFile)) { New-Item $envFile -ItemType File -Force }
$envLines = Get-Content $envFile
$needed = @("OPENAI_API_KEY", "GEMINI_API_KEY", "SUPABASE_URL", "SUPABASE_KEY", "GOOGLE_SERVICE_ACCOUNT_JSON")
foreach ($var in $needed) {
    if (-not ($envLines -join "`n" -match $var)) {
        $val = Read-Host "‚õî $var manquant, entre la valeur ou laisse vide pour ignorer"
        if ($val) { Add-Content $envFile "$var=$val" }
    }
}

# --- 4. V√©rifie que profile.json existe et est valide
try {
    $profile = Get-Content "data/profile.json" | ConvertFrom-Json
    if (-not $profile.name) { throw "Champ 'name' manquant." }
}
catch {
    Write-Host "‚ö†Ô∏è profile.json corrompu. R√©initialisation..."
    Set-Content "data/profile.json" '{ "name": "Yann", "role": "Architecte IA", "objectives": ["..."] }'
}

# --- 5. Installe toutes les d√©pendances Python
Write-Host "üì¶ Installation/MAJ des d√©pendances Python..."
python -m pip install --upgrade pip
pip install -r requirements.txt

# --- 6. V√©rifie la connexion Google Drive
Write-Host "üóÇÔ∏è Test Google Drive API..."
$drive = python scripts/test_gdrive.py
Write-Host $drive

# --- 7. V√©rifie la connexion OneDrive (si script dispo)
if (Test-Path "scripts\bind_onedrive.ps1") {
    Write-Host "‚òÅÔ∏è Test liaison OneDrive..."
    . scripts\bind_onedrive.ps1
}

# --- 8. V√©rifie que l‚Äôinterface web est pr√™te
if (-not (Test-Path "web_interface\app.py")) {
    Write-Host "üõ†Ô∏è (Re)cr√©ation interface web Flask..."
    .\setup_web_interface.ps1
}

Write-Host "`n‚úÖ Tout est pr√™t‚ÄØ! Lance ./launch_server.ps1 pour d√©marrer ton JARVIS local." -ForegroundColor Green
